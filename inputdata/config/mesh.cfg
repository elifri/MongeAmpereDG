[general]
executable = mesh.POISSON_PREC_p1

# Configure general options (files and directories etc.)
gridfiletemplate  = inputdata/grid/unitsquare_dirichlet/unitsquare_dirichlet
msafile           = inputdata/msa/bezier2.msa
interpolatory_basis = 0
lagfile           = inputdata/lag/standard.lag
outputdir         = data/s
outputprefix      = a_
levelmax          = 31

[cells]
# Control initial reservation of cells
reserve_base =  1000
reserve_ante = 50000
reserve_leaf = 100000

[method]
# Select DG method

# Select sign of stabilization term
# choose +1 for Bauman-Oden and NIPG
# or     -1 for GEM and SIPG
stabsign = -1

# Select gamma factor for penalty term
# or 0.0 for no penalty (e.g. Bauman-Oden or GEM)
gamma_continuous = 20
gamma_gradient = 50
gamma_boundary = 40

# fraction for aposteriori error estimator
theta       = 0.60
theta_hat   = 0.00

# factor for next iteration CG absolute tolerance
eta = 1.0e-2

#select weak or strong boundary condition
strongBoundaryCond = 0

[monge ampere]
# Choose parameters specific for monge ampere problems
start_iteration = sqrt_f
#specify how often the grid is refined (nested iterations)
iterations_refinement = 3
#specify how often to iterate on a grid
maximal_iterations = 20
startlevel = 1
#damping parameter for the convex combination of two steps (alpha is the coefficient of the newer solution)
alpha = 0.5
#select equation, choose between
#SIMPLEMONGEAMPERE, SIMPLEMONGEAMPERE2, MONGEAMPERE1, MONGEAMPERE2, MONGEAMPERE3, CONST_RHS, BRENNER_EX1
equation = MONGEAMPERE1

[poisson]
# Choose parameters specific for poisson problems
startlevel = 4
loops = 1
analyze_matrix = NO
analyze_filename = BaumanOden

[adaptation]
adaptation_method = smoothnessindicator
# Choose parameters for grid adaptation
# refine all cells with error bigger than this; 0 means: uniform refinement
refine_eps  = 0
# coarsen all cells with error smaller than this; 0 means: no coarsening
coarsen_eps = 0

[linear_solver]
# Select Krylov method (CG, PCG, MyCG, GMRES, BiCGSTAB)
krylov_method = PCG
# Specify Krylov method tolerance
absolute_tolerance   = 1e-15
relative_tolerance   = 1e-50
divergence_tolerance = 1e5
maximum_iterations   = 100000

[jumping coefficients]
jumping = yes

# diffusion coefficient matrices for base cells, row-wise
diffusion_a[000] =  1  0  0  1
diffusion_a[001] =  1  0  0  1
diffusion_a[002] =  1  0  0  1
diffusion_a[003] =  1  0  0  1
diffusion_a[004] =  1  0  0  1
diffusion_a[005] =  1  0  0  1

gammafac[000] =  1.0
gammafac[001] =  1.0
gammafac[002] =  1.0
gammafac[003] =  1.0
gammafac[004] =  1.0
gammafac[005] =  1.0
